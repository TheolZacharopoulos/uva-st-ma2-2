Lab 1: Functional Programming and Logic

> module Lab1 where
Implement and test the Luhn Algorithm

The Luhn algorithm is a formula for validating credit card numbers. Detailed instructions for a Haskell solution are here. This exercise is taken from the Upenn Haskell Course, exercises 1–5. Please observe the style instructions on the Upenn course website. Note that testing software for the exercises is provided, together with a test for the first exercise. Your task is also to give tests for exercises 2–5.

Crime Scene Investigation

A group of five school children is caught in a crime. One of them has stolen something from some kid they all dislike. The headmistress has to find out who did it. She questions the children, and this is what they say:

Matthew: Carl didn’t do it, and neither did I. Peter It was Matthew or it was Jack. Jack Matthew and Peter are both lying. Arnold Matthew or Peter is speaking the truth, but not both. Carl What Arnold says is not true.

Their class teacher now comes in. She says: three of these boys always tell the truth, and two always lie. You can assume that what the class teacher says is true. Use Haskell to write a function that computes who was the thief, and a function that computes which boys made honest declarations. Here are some definitions to get you started.

> data Boy = Matthew | Peter | Jack | Arnold | Carl 
>            deriving (Eq,Show)
> 
> boys = [Matthew, Peter, Jack, Arnold, Carl]
> 
> matthew, peter, jack, arnold, carl :: Boy -> Bool
> matthew = \ x -> not (x==Matthew) && not (x==Carl)
> peter   = \ x -> x==Matthew || x==Jack
> jack    = \ x -> not (matthew x) && not (peter x)
> arnold  = \ x -> matthew x /= peter x
> carl    = \ x -> not (arnold x)
>           
> declarations = [matthew,peter,jack,arnold,carl]
> table = zip declarations boys
Write a function guilty that lists the boys that could have done it, and a function honest that lists the boys that have made honest declarations, for each member of the solution list.

Submission deadline is Sunday evening, September 6th, at midnight.
